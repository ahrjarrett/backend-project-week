{"version":3,"sources":["webpack:///./src/api/resources/user/user.model.js"],"names":["schema","email","type","String","unique","required","passwordHash","username","notes","mongoose","Schema","Types","ObjectId","ref","userSchema","timestamps","methods","authenticate","plainTextPassword","bcrypt","compareSync","password","hashPassword","Error","salt","genSaltSync","hashSync","User","model"],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEO,IAAMA,SAAS;AACpBC,SAAO;AACLC,UAAMC,MADD;AAELC,YAAQ,IAFH;AAGLC,cAAU,CAAC,IAAD,EAAO,yBAAP;AAHL,GADa;;AAOpBC,gBAAc;AACZJ,UAAMC,MADM;AAEZE,cAAU,CAAC,IAAD,EAAO,4BAAP;AAFE,GAPM;;AAYpBE,YAAU;AACRL,UAAMC;AACN;AAFQ,GAZU;;AAiBpBK,SAAO,CAAC;AACNN,UAAMO,gDAAQA,CAACC,MAAT,CAAgBC,KAAhB,CAAsBC,QADtB;AAENC,SAAK;AAFC,GAAD;AAjBa,CAAf;;AAuBP,IAAMC,aAAa,IAAIL,gDAAQA,CAACC,MAAb,CAAoBV,MAApB,EAA4B,EAAEe,YAAY,IAAd,EAA5B,CAAnB;;AAEAD,WAAWE,OAAX,GAAqB;AACnBC,cADmB,wBACNC,iBADM,EACa;AAC9B,WAAOC,8CAAMA,CAACC,WAAP,CAAmBF,iBAAnB,EAAsC,KAAKG,QAA3C,CAAP;AACD,GAHkB;AAInBC,cAJmB,wBAINJ,iBAJM,EAIa;AAC9B,QAAI,CAACA,iBAAL,EAAwB;AACtB,YAAM,IAAIK,KAAJ,CAAU,qBAAV,CAAN;AACD;;AAED,QAAMC,OAAOL,8CAAMA,CAACM,WAAP,CAAmB,EAAnB,CAAb;AACA,WAAON,8CAAMA,CAACO,QAAP,CAAgBR,iBAAhB,EAAmCM,IAAnC,CAAP;AACD;AAXkB,CAArB;;AAcO,IAAMG,OAAOlB,gDAAQA,CAACmB,KAAT,CAAe,MAAf,EAAuBd,UAAvB,CAAb,C","file":"0.4ace06e801f0d7189e97.hot-update.js","sourcesContent":["import mongoose from 'mongoose'\nimport bcrypt from 'bcrypt'\n\nexport const schema = {\n  email: {\n    type: String,\n    unique: true,\n    required: [true, 'User email is required.'],\n  },\n\n  passwordHash: {\n    type: String,\n    required: [true, 'User password is required.'],\n  },\n\n  username: {\n    type: String,\n    // default: this.email,\n  },\n\n  notes: [{\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'note',\n  }],\n}\n\nconst userSchema = new mongoose.Schema(schema, { timestamps: true })\n\nuserSchema.methods = {\n  authenticate(plainTextPassword) {\n    return bcrypt.compareSync(plainTextPassword, this.password)\n  },\n  hashPassword(plainTextPassword) {\n    if (!plainTextPassword) {\n      throw new Error('Could not save user')\n    }\n\n    const salt = bcrypt.genSaltSync(10)\n    return bcrypt.hashSync(plainTextPassword, salt)\n  }\n}\n\nexport const User = mongoose.model('user', userSchema)\n\n\n\n// WEBPACK FOOTER //\n// ./src/api/resources/user/user.model.js"],"sourceRoot":""}